/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#define CTRL XPAR_VERILOG_BOY_V1_0_0_BASEADDR
#define ADDR XPAR_VERILOG_BOY_V1_0_0_BASEADDR+4
#define DATA XPAR_VERILOG_BOY_V1_0_0_BASEADDR+8

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "sleep.h"
#include "xparameters.h"
#include "ff.h"
#include "xdevcfg.h"

static FATFS fatfs;
static FIL fil;
static u8 buffer[1024];

void halt();
void reset();
void writeCartMem(u32,u32);
void writeVgaMem(u32,u32,u32);
void endWriteMem();
void setSharedMemEnabled(u32);

int SDInit();
int SDOpenFile(char*);
int SDReadFile(void*,u32,UINT*);
int SDCloseFile();

void LoadROM();

int main()
{
	init_platform();

	while(1){
		char ch;
		LoadROM();
		scanf("%c",&ch);
		if(ch=='r');
	}

	cleanup_platform();
	return 0;
}

void halt(){
	u32 tmp=Xil_In32(CTRL);
	Xil_Out32(CTRL,tmp|0x1);//reset<=1'b1
}

void reset(){
	u32 tmp=Xil_In32(CTRL);
	Xil_Out32(CTRL,tmp|0x1);//reset<=1'b1
	sleep(1);
	Xil_Out32(CTRL,tmp&0xFFFFFFFE);//reset<=1'b0
}

void writeCartMem(u32 addr,u32 data){
	u32 tmp=Xil_In32(CTRL)|0x4;//we<=1'b1
	Xil_Out32(CTRL,tmp&0xFFFFFFFD);//clk<=1'b0
	Xil_Out32(ADDR,addr);
	Xil_Out32(DATA,data);
	Xil_Out32(CTRL,tmp|0x2);//clk<=1'b1
}

void writeVgaMem(u32 x,u32 y,u32 color){
	u32 addr=(y*160+x)|0xFFFF0000;
	u32 tmp=Xil_In32(CTRL)|0x4;//we<=1'b1
	Xil_Out32(CTRL,tmp&0xFFFFFFFD);//clk<=1'b0
	Xil_Out32(ADDR,addr);
	Xil_Out32(DATA,color);
	Xil_Out32(CTRL,tmp|0x2);//clk<=1'b1
}

void endWriteMem(){
	u32 tmp=Xil_In32(CTRL);
	Xil_Out32(CTRL,tmp&0xFFFFFFF9);//clk<=1'b0,we<=1'b0
}

void setSharedMemEnabled(u32 en){
	u32 tmp=Xil_In32(CTRL);
	tmp=(en==0)?(tmp&0xFFFFFFF7):(tmp|0x8);
	Xil_Out32(CTRL,tmp);
}

int SDInit(){
	FRESULT rc;
	rc = f_mount(&fatfs,"",0);
	if(rc)
	{
		xil_printf("ERROR : f_mount returned %d\r\n",rc);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int SDOpenFile(char* FileName)
{
	FRESULT rc;
	rc = f_open(&fil,FileName,FA_READ);
	if(rc)
	{
		xil_printf("ERROR : f_open returned %d\r\n",rc);
		return XST_FAILURE;
	}
	rc = f_lseek(&fil, 0);
	if(rc)
	{
		xil_printf("ERROR : f_lseek returned %d\r\n",rc);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int SDReadFile(void* DestinationAddress,u32 size,UINT* br){
	FRESULT rc;
	rc = f_read(&fil, (void*)DestinationAddress,size,br);
	if(rc)
	{
		xil_printf("ERROR : f_read returned %d\r\n",rc);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int SDCloseFile(){
	FRESULT rc;
	rc = f_close(&fil);
	if(rc)
	{
		xil_printf("ERROR : f_close returned %d\r\n", rc);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

void LoadROM(){
	char filename[255];
	u32 romAddr=0;
	int rc;
	UINT br;

	halt();
	sleep(2);
	while(1){
		print("Please input ROM file name:\r\n");
		scanf("%s",filename);

		rc=SDInit();
		rc=SDOpenFile(filename);
		while(1){
			rc=SDReadFile(buffer,sizeof(buffer),&br);
			if(rc==XST_FAILURE||br==0)break;
			for(UINT i=0;i<br;++i,++romAddr){
				writeCartMem(romAddr,buffer[i]);
			}
			print("*");
		}
		SDCloseFile();
		if(rc==XST_FAILURE){
			print("\r\n### Load ROM Failed! ###\r\n");
			continue;
		}
		else {
			print("\r\nLoad ROM Success\r\n");
			break;
		}
	}
	sleep(1);
	reset();
	print("Reset OK\r\n");
	setSharedMemEnabled(1);
}
